## Tell Spring to load the config.properties file
#spring.config.location=classpath:/config.properties
#
## Database Configuration
#spring.datasource.url=jdbc:postgresql://localhost:5432/${DB_NAME}
#spring.datasource.username=${DB_USERNAME}
#spring.datasource.password=${DB_PASSWORD}
#spring.datasource.driver-class-name=org.postgresql.Driver
#spring.datasource.hikari.maximum-pool-size=10
#
## JPA/Hibernate Configuration
#spring.jpa.hibernate.ddl-auto=update  # Use 'create' for dev, 'update' to keep existing schema, 'none' for prod
#spring.jpa.show-sql=true  # Show SQL in console for debugging
#spring.jpa.properties.hibernate.format_sql=true
#
## Enable the use of the `hibernate.dialect` for PostgreSQL
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
#
## Logging Configuration
#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.type.descriptor.sql=TRACE

# Tell Spring to load the config.properties file
# This line is correct, ensure the config.properties is placed in the resources folder
spring.config.location=classpath:/config.properties 

# Database Configuration
# Change to use the correct property references
spring.datasource.url=jdbc:postgresql://localhost:5432/${ActivityLogger}   # No change needed, just ensure that DB_NAME is correctly set in config.properties
spring.datasource.username=${DB_USERNAME}  # This should reference the username from config.properties
spring.datasource.password=${DB_PASSWORD}  # This should reference the password from config.properties

# Hibernate Connection Pooling settings (HikariCP)
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.hikari.maximum-pool-size=10

# JPA/Hibernate Configuration
# Ensure that this setting will auto-create or update your tables. 'update' will only update existing tables (ideal for development)
spring.jpa.hibernate.ddl-auto=update  # Change this to 'create' if you want Hibernate to drop and create tables every time

spring.jpa.show-sql=true  # This will show SQL queries in the console (useful for debugging)
spring.jpa.properties.hibernate.format_sql=true  # This will format the SQL output for better readability

# Enable the use of the `hibernate.dialect` for PostgreSQL
# Make sure this is configured for PostgreSQL dialect so Hibernate knows how to interact with your PostgreSQL database
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Logging Configuration
# This will enable logging for Hibernate SQL queries, which will help debug issues related to database interactions
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql=TRACE

#spring.jpa.hibernate.ddl-auto=update: This tells Hibernate to update the database schema based on the entity classes.
# If you want to create tables from scratch (e.g., for development), you can set this to create (useful for testing).
#spring.jpa.show-sql=true: Will print the generated SQL queries in the console, helping with debugging.

#Fixing IntelliJ Not Showing DB Entries:
#Why it?s not showing: This might happen because Hibernate is not properly connected or the data might not be saved via JPA.
# Ensure that the correct entities are mapped to the database and that you have used the correct annotations like @Entity, @Table, etc.
#Solution: Make sure that your @Entity annotated classes are properly scanned by Spring Boot.
# Also, ensure that you are actually persisting data to the database. Use save() method from JpaRepository or CrudRepository
# to persist entities.

#@Autowired
#private ActivityRepository activityRepository;
#
#public void createActivity(ActivityDTO activityDTO) {
#    Activity activity = new Activity();
#    // Map the fields from DTO to entity and save
#    activityRepository.save(activity);
#}

#You may want to verify that you have an ActivityRepository extending JpaRepository<Activity, Long>. If you?re still facing issues,
# verify the connection to the database (in IntelliJ and
